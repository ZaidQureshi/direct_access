#pragma once

#include "cuda.h"
#include <cstdio>

#define cuda_err_chk(ans) { gpuAssert((ans), __FILE__, __LINE__); }

inline void gpuAssert(int code, const char *file, int line, bool abort=false)
{
    if (code != 0)
    {
        fprintf(stderr,"Assert: %i %s %d\n", code, file, line);
        if (abort) exit(1);
    }
}

template <unsigned BD, typename read_t>
__global__ void gpu_read(const read_t *ptr, read_t *flag, const size_t bytes) {
    const size_t gx = blockIdx.x * BD + threadIdx.x;
    const size_t num_elems = bytes / sizeof(read_t);

    // #pragma unroll(1)
    for (size_t i = gx; i < num_elems; i += gridDim.x * BD) {
        read_t t;
        t = ptr[i];
        if (flag) {
            *flag = t;
        }
    }
}

template <unsigned BD, typename write_t>
__global__ void gpu_write(write_t *ptr, const size_t bytes) {
    const size_t gx = blockIdx.x * BD + threadIdx.x;
    const size_t num_elems = bytes / sizeof(write_t);
#pragma unroll(5)
    for (size_t i = gx; i < num_elems; i += gridDim.x * BD) {
        ptr[i] = 0;
    }
}

template <unsigned BD, typename data_t>
__global__ void gpu_mix(data_t *ptr, data_t *flag, const size_t bytes) {
    const size_t gx = blockIdx.x * BD + threadIdx.x;
    const size_t wx = gx / 32;
    const size_t num_elems = bytes / sizeof(data_t);

    for (size_t i = gx; i < num_elems; i += gridDim.x * BD) {
        if (wx % 2)
            ptr[i] = 0;
        else {
            data_t t;
            t = ptr[i];
            if (flag) {
                *flag = t;
            }
        }

    }
}
